// The malloc heap works as follows:
// mallocBase                    -> first 'page' of malloced data
// mallocHead   (mallocBase - 2) -> state of malloc 'head'  (i.e. first page that has never been allocated)
func int @malloc(int size) {
    static int @mallocBase   = 2147483648;
    static int @mallocHead   = mallocBase - 1;
    static int pageLength    = 1024;
    
    // Allocate the first space that has never  been used
    int @allocatedPageStart = mallocBase + (!mallocHead * pageLength);
    
    // Move along the unused page counter
    int thisPageLength = (size / pageLength) + 1;
    !mallocHead = !mallocHead + thisPageLength;
    
    // Return the pointer we calculated for their page
    return allocatedPageStart;
}

struct Player {
    int health;
    int mana;
    int coins;
}

Player @x = malloc(sizeof Player);
Player @y = malloc(sizeof Player);

x->health = 5;

y->health = 10;
x->coins = 14;
y->coins = x->coins + 15;
print x->health;
print y->health;
print y->coins;
